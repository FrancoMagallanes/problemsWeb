#pragma checksum "C:\Users\Franco\source\repos\ProblemsWeb\ProblemsWeb\Views\Site\Search.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "98072b5c1e1c11bdfb9d9f9b028c252ff5d6a067"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Site_Search), @"mvc.1.0.view", @"/Views/Site/Search.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Franco\source\repos\ProblemsWeb\ProblemsWeb\Views\_ViewImports.cshtml"
using ProblemsWeb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Franco\source\repos\ProblemsWeb\ProblemsWeb\Views\_ViewImports.cshtml"
using ProblemsWeb.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"98072b5c1e1c11bdfb9d9f9b028c252ff5d6a067", @"/Views/Site/Search.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2d16ad862ab1e617f4f3971a7b5d43d2ff55a344", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Site_Search : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<div class=""container"">
    <div class=""row"">
        <div class=""input-group"">
            <input type=""search"" class=""form-control rounded"" placeholder=""Search"" aria-label=""Search"" aria-describedby=""search-addon "" id=""txtSearch"" />
            <button type=""button"" class=""btn btn-outline-primary"" onclick=""searchSolution(); createSearch();"">search</button>
        </div>
    </div>


    <div class=""row"">
        <table class=""table table-bordered"">
            <thead>
                <tr>
                    <th scope=""col"">#</th>
                    <th scope=""col"">First</th>
                    <th scope=""col"">Last</th>
                    <th scope=""col"">Handle</th>
                </tr>
            </thead>
            <tbody id=""data"">
            </tbody>
        </table>
    </div>
</div>
<script>

    const getAllSolutions = () => {

        let url = '/api/solution/FindAllSlt'

        fetch(url)
            .then(response => response.json())
            .then(data =");
            WriteLiteral(@"> showData(data))
            .catch(error => console.log(error))


        const showData = (data) => {


            console.log(data)
            let body = """"

            for (let i = 0; i < data.length; i++) {

                // document.getElementById(""divWords"").innerHTML += data[i]+ '<br/>'

                body += data[i].message + '<br/>'


            }


            document.getElementById(`divSearches`).innerHTML = body
        }




    }



    const searchSolution = async () => {



        var errorText = {
            errorCode: document.getElementById('txtSearch').value


        }



        await fetch('/api/solution/FindAllSltSearch', {
            method: 'POST',
            body: JSON.stringify(errorText),
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then((response) => response.json())
            .catch(error => {
                console.error('Error:', error);
    ");
            WriteLiteral(@"            alert('Error! revisar log ');
            })
            .then(response => {

                alert('Respuesta del servidor: ' + response)
                console.log('Success:', response)

                //let body = ''

                //for (let i = 0; i < response.length; i++) {

                //    body += response[i].title
                //}
                //document.getElementById(""divSearches"").innerHTML = body

                let body = """"

                for (let i = 0; i < response.length; i++) {



                    body += `<tr> <td class=""text-center""> ${response[i].title}</td> <td class=""text-center""> ${response[i].message}</td> <td><input type=button id=btnLike value=like onclick=addLike(${response[i].id}) /> </td> <td><input type=button id=btnDislike value=dislike onclick=addDislike(${response[i].id}) /> </td> </tr>`


                }


                document.getElementById(`data`).innerHTML = body




            });




    }

");
            WriteLiteral(@"

    const addLike = async (id) => {


        var like = {

            solutionId: id,
            userId: 1,
            likeType: document.getElementById(""btnLike"").value
        }

        let url = ""/api/solution/CreateLike""
        await fetch(url, {
            method: 'POST',
            body: JSON.stringify(like),
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then(res => res.text())
            .catch(error => {
                console.error('Error:', error);
                alert('Error! revisar log ');
            })
            .then(response => {

                alert('Respuesta del servidor: ' + response)
                console.log('Success:', response)

            });

    }

    const addDislike = async (id) => {


        var like = {

            solutionId: id,
            userId: 1,
            likeType: document.getElementById(""btnDislike"").value
        }

        let url = ");
            WriteLiteral(@"""/api/solution/CreateLike""
        await fetch(url, {
            method: 'POST',
            body: JSON.stringify(like),
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then(res => res.text())
            .catch(error => {
                console.error('Error:', error);
                alert('Error! revisar log ');
            })
            .then(response => {

                alert('Respuesta del servidor: ' + response)
                console.log('Success:', response)

            });

    }

    const createSearch = async () => {


        var search = {

            text: document.getElementById('txtSearch').value,
            foundCount: 1



        }

        let url = ""/api/search/CreateSearch""

        await fetch(url, {
            method: 'POST',
            body: JSON.stringify(search),
            headers: {
                'Content-Type': 'application/json'
            }
        })
      ");
            WriteLiteral(@"      .then(res => res.text())
            .catch(error => {
                console.error('Error:', error);
                alert('Error! revisar log ');
            })
            .then(response => {

                alert('Respuesta del servidor: ' + response)
                console.log('Success:', response)

            });
    }

</script>

<script src=""/lib/jquery/dist/jquery.min.js""></script>
<script src=""/lib/bootstrap/dist/js/bootstrap.bundle.min.js""></script>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
