#pragma checksum "C:\Users\Franco\source\repos\ProblemsWeb\ProblemsWeb\Views\Site\Solution.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "349a89e1692b46cbcbe37c3a12fd1e75728257a4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Site_Solution), @"mvc.1.0.view", @"/Views/Site/Solution.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Franco\source\repos\ProblemsWeb\ProblemsWeb\Views\_ViewImports.cshtml"
using ProblemsWeb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Franco\source\repos\ProblemsWeb\ProblemsWeb\Views\_ViewImports.cshtml"
using ProblemsWeb.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"349a89e1692b46cbcbe37c3a12fd1e75728257a4", @"/Views/Site/Solution.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2d16ad862ab1e617f4f3971a7b5d43d2ff55a344", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Site_Solution : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<div class=\"container\">\r\n    <div class=\"mb-3\">\r\n        <label for=\"txtTitle\" class=\"form-label\"> Title</label>\r\n        <input type=\"text\" class=\"form-control\" id=\"txtTitle\"");
            BeginWriteAttribute("placeholder", " placeholder=\"", 175, "\"", 189, 0);
            EndWriteAttribute();
            WriteLiteral(@">
    </div>
    <div class=""mb-3"">
        <label for=""txtMessage"" class=""form-label"">Message</label>
        <textarea class=""form-control"" id=""txtMessage"" rows=""3""></textarea>
    </div>

    <div class=""mb-3"">
        <label for=""txtTitle"" class=""form-label""> KeyWord</label>

        <input type=""text"" class=""form-control"" id=""txtKeyWord""");
            BeginWriteAttribute("placeholder", " placeholder=\"", 544, "\"", 558, 0);
            EndWriteAttribute();
            WriteLiteral(@" style=""width:300px;"">
        <button type=""button"" class=""btn btn-info"" id=""btnSave"" onclick=""agregateKeyWordClick()"">Add</button>
    </div>


    <button type=""button"" class=""btn btn-success"" id=""btnCreate"" onclick=""createSolution()"">Save Changes</button>

    <div id=""divWords""></div>

</div>


<script>
    const getSolutionById = async () => {

        let queryString = window.location.search;

        let urlParams = new URLSearchParams(queryString);

        let id = urlParams.get('id')

        if (id == 0) {

        }
        else {
            console.log(id)

            let url = '/api/Solution/GetSolutionById?id=' + id

            fetch(url)
                .then(response => response.json())
                .then(data => {


                    console.log(data)

                    document.getElementById(""txtTitle"").value = data.title

                    document.getElementById(""txtMessage"").value = data.message

                    for (let i = 0; i ");
            WriteLiteral(@"< data.listKeyWord.length; i++) {

                        agregateKeyWord(data.listKeyWord[i].keyWords, data.listKeyWord[i].id)


                    }

                })
                .catch(error => console.log(error))


        }
    }

    getSolutionById();


    const deleteKeyWord = (id) => {



        let Id = parseInt(id)

        fetch('/api/solution/DeleteKeyWord?id=' + Id, {
            method: 'DELETE',
        })

            .then(res => {
                console.log(""adentro del delete"")
            })

    }




    var keyWordsArray = [];

    const agregateKeyWord = (kw, id) => {

        let Keyword = {
            keyWords: kw,
            id: id
        }

        console.log(Keyword)

        keyWordsArray.push(Keyword);

        document.getElementById(""txtKeyWord"").value = '';

        let queryString = window.location.search;

        let urlParams = new URLSearchParams(queryString);

        let idUrl = urlParams.get('id')");
            WriteLiteral(@"
     
        if(idUrl!=0){
        for (let i = 0; i < keyWordsArray.length; i++) {

            document.getElementById(""divWords"").innerHTML += keyWordsArray[i].keyWords + `<input type=button id=btnDeleteKw value=borrar onclick=deleteKeyWord(${keyWordsArray[i].id})  />`

        }
        }

        else{
            document.getElementById(""divWords"").innerHTML += Keyword.keyWords + '<br/>'
            }

        

    }


    const agregateKeyWordClick = () => {

        let kw = document.getElementById('txtKeyWord').value

        agregateKeyWord(kw, 0)


    }

    const createSolution = async () => {


        let url = '/api/Solution/createUpdateSolution'
        const queryString = window.location.search;

        const urlParams = new URLSearchParams(queryString);

        const id = urlParams.get('id')


        let solution = {
            title: document.getElementById('txtTitle').value,
            message: document.getElementById('txtMessage').value,
 ");
            WriteLiteral(@"           userId: 1,
            solutionGroup: ""primera"",
            listKeyWord: keyWordsArray,
            id: parseInt(id)
        }

        console.log(""caca"", solution)
        await fetch(url, {
            method: 'POST',
            body: JSON.stringify(solution),
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then(res => res.text())
            .catch(error => {
                console.error('Error:', error);
                alert('Error! revisar log ');
            })
            .then(response => {

                alert('Respuesta del servidor: ' + response)
                console.log('Success:', response)

            });

    }



                    //const getUsuarios = async () => {

                    //    let url = '/api/cliente/getClientes'

                    //    fetch(url)
                    //        .then(response => response.json())
                    //        .then(data =");
            WriteLiteral(@"> mostrarData(data))
                    //        .catch(error => console.log(error))


                    //    const mostrarData = (data) => {


                    //        console.log(data)
                    //        let body = """"

                    //        for (let i = 0; i < data.length; i++) {



                    //            body += `<tr> <td class=""text-center""> ${data[i].id}</td> <td class=""text-center""> ${data[i].nombreApellido}</td>  </tr>`


                    //        }


                    //        document.getElementById(`data`).innerHTML = body
                    //    }




                    //}

                    //getUsuarios();


                    //const actualizarUsuario = () => {

                    //    let nombre = document.getElementById(`nuevoNombre`).value

                    //    let edad = document.getElementById(`nuevaEdad`).value

                    //    let Is = idVariable

                    //    let Id ");
            WriteLiteral(@"= parseInt(Is)

                    //    let objeto = getUsuario


                    //    fetch('/api/usuarios', {
                    //        method: 'PUT',
                    //        headers: {
                    //            'Access-Control-Allow-Origin': '*',
                    //            'Content-Type': 'application/json'
                    //        },
                    //        body: JSON.stringify({ edad: parseInt(edad), nombre: nombre, id: Id })
                    //    })
                    //        .then(res => {
                    //            return res.json()
                    //        })



                    //        .then(data => {
                    //            getUsuarios();


                    //            console.log(data)
                    //        })


</script>

<script src=""/lib/jquery/dist/jquery.min.js""></script>
<script src=""/lib/bootstrap/dist/js/bootstrap.bundle.min.js""></script>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
